// This is a temporary file to show the fixed code. After reviewing, you can replace the original file with this content.

import { NextResponse } from 'next/server';
import { GoogleGenerativeAI } from '@google/generative-ai';

// Initialize Google Generative AI with API key
const genAI = new GoogleGenerativeAI(process.env.GOOGLE_GEMINI_API_KEY || '');

export async function POST(request: Request) {
  try {
    const { prompt, weatherData, interests, duration, budget, pax, sampleItinerary } = await request.json();

    // Validate required parameters
    if (!prompt) {
      return NextResponse.json(
        { error: "Missing required parameters" },
        { status: 400 }
      );
    }

    // Create a more detailed prompt with weather-specific recommendations
    let enhancedPrompt = prompt;

    // Add weather-specific recommendations
    if (weatherData) {
      const weatherCondition = weatherData.weather[0].main.toLowerCase();
      const weatherDescription = weatherData.weather[0].description.toLowerCase();
      const temperature = Math.round(weatherData.main.temp);

      enhancedPrompt += `\n\nCurrent weather in Baguio: ${weatherData.weather[0].main} (${temperature}°C), ${weatherData.weather[0].description}.\n`;

      // Add specific recommendations based on weather
      if (weatherCondition.includes('rain') || weatherDescription.includes('rain') || weatherDescription.includes('drizzle')) {
        enhancedPrompt += `\nSince it's currently raining, please include more indoor activities and appropriate rainy weather recommendations. Tag indoor activities as "Indoor-Friendly".\n`;
      } else if (weatherCondition.includes('clear') || weatherDescription.includes('clear') || weatherDescription.includes('sunny')) {
        enhancedPrompt += `\nSince the weather is clear, outdoor activities would be ideal. Tag outdoor activities as "Outdoor-Friendly".\n`;
      } else if (weatherCondition.includes('cloud') || weatherDescription.includes('cloud') || weatherDescription.includes('overcast')) {
        enhancedPrompt += `\nThe weather is cloudy, so include a mix of indoor and outdoor activities with appropriate recommendations. Tag versatile activities as "Weather-Flexible".\n`;
      }

      // Temperature-based recommendations
      if (temperature < 15) {
        enhancedPrompt += `\nIt's quite cool (${temperature}°C), so recommend bringing light jackets or sweaters for outdoor activities.\n`;
      } else if (temperature > 25) {
        enhancedPrompt += `\nIt's relatively warm (${temperature}°C), so recommend light clothing and staying hydrated for outdoor activities.\n`;
      }
    }

    // Add interest-specific guidance
    if (interests && interests.length > 0) {
      enhancedPrompt += `\n\nThe traveler is particularly interested in: ${interests.join(', ')}. Please ensure the itinerary focuses on these interests.\n`;
    }

    // Add budget-specific guidance
    if (budget) {
      enhancedPrompt += `\n\nThe traveler's budget is ${budget}. Please ensure all recommendations are appropriate for this budget level.\n`;
    }

    // Add group size considerations
    if (pax) {
      enhancedPrompt += `\n\nThis itinerary is for ${pax} traveler(s). Please ensure all recommendations are suitable for this group size.\n`;
    }

    // Add sample itinerary structure for reference
    if (sampleItinerary) {
      enhancedPrompt += `\n\nPlease format the response as a JSON object with this structure (but with your own content):\n\n`;
      enhancedPrompt += `{
  "title": "Your ${duration} Itinerary",
  "subtitle": "A personalized Baguio Experience",
  "items": [
    {
      "period": "Morning (8AM-12NN)",
      "activities": [
        {
          "title": "Activity Name",
          "time": "9:00AM-10:30AM",
          "desc": "Detailed description including costs, travel times, and specific recommendations.",
          "tags": ["Interest Category", "Budget-friendly", "Indoor-Friendly"]
        }
      ]
    },
    {
      "period": "Afternoon (12NN-6PM)",
      "activities": []
    },
    {
      "period": "Evening (6PM onwards)",
      "activities": []
    }
  ]
}`;
    }

    // Add explicit instructions for JSON formatting
    enhancedPrompt += `\n\nVERY IMPORTANT: Your response MUST be a valid JSON object following the structure provided. Do not include any explanatory text outside the JSON structure. Ensure all property names and string values are properly quoted with double quotes. Do not use markdown code blocks or any other formatting - just return the raw JSON object.\n`;

    // Configure the model
    const model = genAI.getGenerativeModel({
      model: "gemini-1.5-flash-latest",
      generationConfig: {
        temperature: 0.7,
        topP: 0.9,
        topK: 40,
        maxOutputTokens: 8192,
      },
    });

    // Generate content
    const result = await model.generateContent(enhancedPrompt);
    const response = await result.response;
    const text = response.text();

    // Enhanced JSON extraction and validation with robust error handling
    // Try to extract JSON from the text response
    let jsonMatch = text.match(/```json\n([\s\S]*?)\n```/) || 
                    text.match(/```([\s\S]*?)```/) || 
                    text.match(/{[\s\S]*?}/);
                    
    let extractedJson = "";
    if (jsonMatch) {
      extractedJson = jsonMatch[1] || jsonMatch[0];
    } else {
      // If no JSON block is found, try to find anything that looks like a JSON object
      const possibleJsonStart = text.indexOf('{');
      const possibleJsonEnd = text.lastIndexOf('}');
      
      if (possibleJsonStart !== -1 && possibleJsonEnd !== -1 && possibleJsonEnd > possibleJsonStart) {
        extractedJson = text.substring(possibleJsonStart, possibleJsonEnd + 1);
      } else {
        return NextResponse.json({ 
          text, 
          error: "NO_JSON_FOUND",
          errorMessage: "Could not extract JSON from the response"
        });
      }
    }
    
    let cleanedJson = "";
    let parsedData = null;
    
    if (extractedJson) {
      // Clean the JSON content
      cleanedJson = extractedJson
        .trim()
        .replace(/\/\/.*$/gm, '') // Remove single line comments
        .replace(/\/\*[\s\S]*?\*\//g, '') // Remove multi-line comments
        .replace(/\n/g, ' ') // Replace newlines with spaces
        .replace(/\r/g, ' ') // Replace carriage returns with spaces
        .replace(/\t/g, ' ') // Replace tabs with spaces
        .replace(/\s+/g, ' ') // Normalize spaces
        .replace(/,\s*}/g, '}') // Remove trailing commas in objects
        .replace(/,\s*\]/g, ']') // Remove trailing commas in arrays
        .replace(/\'/g, '"') // Replace single quotes with double quotes
        .replace(/([{[,:]\s*)(")?([\w\s]+)(")?\s*:/g, '$1"$3"$5') // Ensure property names are quoted
        .replace(/:\s*([^\s\[{\]},"]+)\s*([,}\]])/g, ': "$1"$2') // Quote unquoted string values
        .replace(/"([^"]*)("")([^"]*)"/, '"$1"$3"') // Fix double quotes inside strings
        .replace(/([^\\])"([^"]*)\n([^"]*)"/, '$1"$2\\n$3"') // Fix unescaped newlines in strings
        .replace(/,\s*[,}\]]/g, function(match) { return match.charAt(match.length - 1); }) // Remove duplicate commas
        .replace(/([{\[,:]\s*)(\/\/[^\n]*)/g, '$1'); // Remove inline comments
      
      try {
        // First attempt to parse the JSON as is
        try {
          parsedData = JSON.parse(cleanedJson);
        } catch (parseError) {
          console.warn("Initial JSON parse failed, attempting additional fixes:", parseError);
          
          // Try more aggressive JSON fixing techniques
          // 1. Find and fix the specific position mentioned in the error message if available
          if (parseError instanceof Error && parseError.message.includes('position')) {
            const positionMatch = parseError.message.match(/position (\d+)/i);
            if (positionMatch && positionMatch[1]) {
              const errorPosition = parseInt(positionMatch[1]);
              console.log(`Error detected at position ${errorPosition}, examining surrounding context...`);
              
              // Get context around the error (20 chars before and after)
              const start = Math.max(0, errorPosition - 20);
              const end = Math.min(cleanedJson.length, errorPosition + 20);
              const context = cleanedJson.substring(start, end);
              console.log(`Context around error: "${context}"`);
              
              // Apply targeted fixes based on common patterns at error positions
              // This is a simplified approach - in a production environment, you might want more sophisticated parsing
              cleanedJson = cleanedJson.substring(0, errorPosition) + 
                           cleanedJson.substring(errorPosition).replace(/^[^,{}\[\]]+/, '""') // Replace problematic token with empty string
                           .replace(/^,/, ''); // Remove comma if that's the issue
            }
          }
          
          // 2. Try even more aggressive cleaning as a last resort
          cleanedJson = cleanedJson
            .replace(/([\w\s]+):/g, '"$1":') // Force quote all potential property names
            .replace(/:\s*([\w\s.]+)([,}\]])/g, ':"$1"$2') // Force quote all potential string values
            .replace(/,\s*[,}\]]/g, function(match) { return match.charAt(match.length - 1); }) // Remove duplicate commas
            .replace(/[\n\r\t]/g, ' ') // Replace all whitespace with spaces
            .replace(/\s+/g, ' ') // Normalize spaces
            .replace(/([{\[,:]\s*)(\/\/[^\n]*)/g, '$1') // Remove inline comments
            .replace(/([^\\])"([^"]*)""([^"]*)"/, '$1"$2\"$3"'); // Fix triple quotes
          
          // Try parsing again with the more aggressively cleaned JSON
          try {
            parsedData = JSON.parse(cleanedJson);
            console.log("Successfully parsed JSON after aggressive cleaning");
          } catch (secondParseError) {
            console.error("Failed to parse JSON even after aggressive cleaning:", secondParseError);
            throw secondParseError; // Re-throw to be caught by the outer catch
          }
        }
        
        // Comprehensive structure validation
        if (!parsedData) {
          throw new Error("Invalid itinerary: empty data");
        }
        
        if (!parsedData.title || typeof parsedData.title !== 'string') {
          throw new Error("Invalid itinerary structure: missing or invalid 'title'");
        }
        
        if (!parsedData.subtitle || typeof parsedData.subtitle !== 'string') {
          throw new Error("Invalid itinerary structure: missing or invalid 'subtitle'");
        }
        
        if (!parsedData.items || !Array.isArray(parsedData.items) || parsedData.items.length === 0) {
          throw new Error("Invalid itinerary structure: missing, empty, or invalid 'items' array");
        }
        
        // Validate each item in the items array
        for (const item of parsedData.items) {
          if (!item.period || typeof item.period !== 'string') {
            throw new Error("Invalid itinerary structure: missing or invalid 'period' in an item");
          }
          
          if (!item.activities || !Array.isArray(item.activities) || item.activities.length === 0) {
            throw new Error("Invalid itinerary structure: missing, empty, or invalid 'activities' array in an item");
          }
          
          // Validate each activity
          for (const activity of item.activities) {
            if (!activity.title || typeof activity.title !== 'string') {
              throw new Error("Invalid itinerary structure: missing or invalid 'title' in an activity");
            }
            
            if (!activity.time || typeof activity.time !== 'string') {
              throw new Error("Invalid itinerary structure: missing or invalid 'time' in an activity");
            }
            
            if (!activity.desc || typeof activity.desc !== 'string') {
              throw new Error("Invalid itinerary structure: missing or invalid 'desc' in an activity");
            }
            
            if (!activity.tags || !Array.isArray(activity.tags)) {
              throw new Error("Invalid itinerary structure: missing or invalid 'tags' array in an activity");
            }
          }
        }
        
        // If validation passes, return the properly formatted JSON
        cleanedJson = JSON.stringify(parsedData);
      } catch (e) {
        console.error("Failed to parse or validate JSON from Gemini response:", e);
        console.log("Original text:", text);
        console.log("Cleaned JSON attempt:", cleanedJson);
        
        // Try to create a minimal valid JSON structure as a fallback
        const fallbackJson = {
          title: "Fallback Itinerary",
          subtitle: "Generated after JSON parsing error",
          items: [
            {
              period: "Morning (8AM-12NN)",
              activities: [
                {
                  title: "Fallback Activity",
                  time: "9:00AM-10:30AM",
                  desc: "This is a fallback activity generated because the original JSON could not be parsed. Please try generating a new itinerary.",
                  tags: ["Indoor-Friendly"]
                }
              ]
            }
          ]
        };
        
        // Return the original text but with a detailed error flag
        return NextResponse.json({ 
          text: JSON.stringify(fallbackJson), 
          error: "JSON_PARSE_ERROR",
          errorMessage: e instanceof Error ? e.message : "Unknown parsing error",
          originalText: text.substring(0, 500) + (text.length > 500 ? '...' : ''), // Include part of the original text for debugging
          cleanedJsonAttempt: cleanedJson.substring(0, 200) + (cleanedJson.length > 200 ? '...' : '') // For debugging
        });
      }
      
      return NextResponse.json({ text: cleanedJson });
    }

    // If no JSON was found, return the text with an error flag
    return NextResponse.json({ 
      text, 
      error: "NO_JSON_FOUND",
      errorMessage: "Could not extract JSON from the response"
    });
  } catch (error) {
    console.error("Error calling Gemini API:", error);
    return NextResponse.json(
      { error: "Failed to generate content" },
      { status: 500 }
    );
  }
}